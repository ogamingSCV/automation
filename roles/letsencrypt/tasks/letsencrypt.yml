---
- name: Install Certbot with Cloudflare DNS plugin
  apt:
    name:
      - python3-certbot
      - python3-certbot-dns-cloudflare
    state: present
    update_cache: true
  become: true

- name: Ensure certbot secrets directory exists
  file:
    path: /root/.secrets/certbot
    state: directory
    owner: root
    group: root
    mode: '0700'
  become: true

- name: Copy Cloudflare credentials for Certbot DNS challenge
  copy:
    content: |
      dns_cloudflare_api_token = {{ cloudflare_api_token }}
    dest: /root/.secrets/certbot/cloudflare.ini
    owner: root
    group: root
    mode: '0600'
  become: true

- name: Filter valid LE domains
  set_fact:
    le_domains: >-
      {{ cert_domains | default([]) |
        select('search', '(' ~ valid_le_domains | join('|') ~ ')$') | list }}

- name: Debug LE domains
  debug:
    msg: "Requesting certs for {{ le_domains }}"
  when: le_domains | length > 0

- name: Skip if no valid LE domains
  meta: end_play
  when: le_domains | length == 0

- name: Obtain or renew individual Let's Encrypt certificates
  command: >
    certbot certonly
    --dns-cloudflare
    --dns-cloudflare-credentials /root/.secrets/certbot/cloudflare.ini
    --dns-cloudflare-propagation-seconds 60
    --non-interactive
    --agree-tos
    --no-eff-email
    --email {{ letsencrypt_email }}
    -d {{ item }}
  args:
    creates: "/etc/letsencrypt/live/{{ item }}/fullchain.pem"
  loop: "{{ le_domains }}"
  loop_control:
    label: "{{ item }}"
  become: true

- name: Create .managed marker if cert_domains is defined
  ansible.builtin.file:
    path: /etc/letsencrypt/.managed
    state: touch
    owner: root
    group: root
    mode: '0644'
  when: cert_domains | default([]) | length > 0
  become: true

- name: Get list of all existing certs
  command: certbot certificates
  register: all_certs
  changed_when: false

- name: Extract all domain names from existing certs
  set_fact:
    all_cert_domains: "{{ all_certs.stdout | regex_findall('Domains: (.*)') | join(' ') | split() }}"

- name: Debug all cert domains
  debug:
    msg: "Currently managed certs: {{ all_cert_domains }}"

- name: Find unused domains (certs not in host vars)
  set_fact:
    unused_domains: "{{ all_cert_domains | difference(le_domains) }}"

- name: Debug unused certs
  debug:
    msg: "Unused certs: {{ unused_domains }}"

- name: Delete unused certificates
  command: certbot delete --cert-name {{ item }} --non-interactive
  loop: "{{ unused_domains }}"
  loop_control:
    label: "{{ item }}"
  become: true
  when: unused_domains | length > 0

- name: Remove managed marker
  ansible.builtin.file:
    path: /etc/letsencrypt/.managed
    state: absent
  become: true
  when:
    - cert_domains | default([]) | length == 0
    - managed_marker.stat.exists